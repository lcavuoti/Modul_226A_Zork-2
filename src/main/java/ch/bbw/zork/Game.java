package ch.bbw.zork;import java.util.ArrayList;/** * Class Game - the main class of the "Zork" game. * * Author:  Michael Kolling, 1.1, March 2000 * refactoring: Rinaldo Lanza, September 2020 */public class Game {	private ArrayList<String> inventory = new ArrayList<String>();	private Minigames games = new Minigames();	private Item item = new Item();	private Parser parser;	private Room currentRoom;	private Room lastRoom;	private Room start, room1, room2, room3, room4, room5, room6, room7, death, end;	public Game() {		parser = new Parser(System.in);		start = new Room("the spawnroom");		room1 = new Room("fight against the monster");		room2 = new Room("grab a true-fruits-smoothie");		room3 = new Room("play \"rock paper scissors\""); // against the digital chind		room4 = new Room("grab a m-budget energy-drink");		room5 = new Room("fight against the monster");		room6 = new Room("play \"rock paper scissors\"");		room7 = new Room("guess a number between 1-10");		death = new Room("-1 life");		end = new Room("Win");		start.setExits(room1, null, room3, null);		room1.setExits(null, room2, null, room1);		room2.setExits(null, room6, room5, room1);		room3.setExits(null, room4, death, start);		room4.setExits(null, room5, death, room3);		room5.setExits(null, room7, room4, room2);		room6.setExits(null, room7, room2, null);		room7.setExits(room6, null, end, room5);		end.setExits(null, null, null, null);		currentRoom = start; // start game outside	}	/**	 *  Main play routine.  Loops until end of play.	 */	public void play() {		printWelcome();		// Enter the main command loop.  Here we repeatedly read commands and		// execute them until the game is over.		boolean finished = false;		int lives = 2;		while (!finished) {			Command command = parser.getCommand();			finished = processCommand(command);			if (room1.equals(currentRoom)) {				finished = room1();			} else if (room2.equals(currentRoom)){				finished = room2();			} else if (room3.equals(currentRoom)){				finished = room3();			} else if (room4.equals(currentRoom)){				finished = room4();			} else if (room5.equals(currentRoom)){				finished = room5();			} else if (room6.equals(currentRoom)){				finished = room6();			} else if (room7.equals(currentRoom)){				finished = room7();			} else if (end.equals(currentRoom)){				win();			} else if (death.equals(currentRoom)){				checkDeath();			}		} System.out.println("Thank you for playing. Good bye.");	}	private void printWelcome() {		System.out.println("" +				"██╗    ██╗███████╗██╗      ██████╗ ██████╗ ███╗   ███╗███████╗    ████████╗ ██████╗     ███████╗ ██████╗ ██████╗ ██╗  ██╗\n" +				"██║    ██║██╔════╝██║     ██╔════╝██╔═══██╗████╗ ████║██╔════╝    ╚══██╔══╝██╔═══██╗    ╚══███╔╝██╔═══██╗██╔══██╗██║ ██╔╝\n" +				"██║ █╗ ██║█████╗  ██║     ██║     ██║   ██║██╔████╔██║█████╗         ██║   ██║   ██║      ███╔╝ ██║   ██║██████╔╝█████╔╝ \n" +				"██║███╗██║██╔══╝  ██║     ██║     ██║   ██║██║╚██╔╝██║██╔══╝         ██║   ██║   ██║     ███╔╝  ██║   ██║██╔══██╗██╔═██╗ \n" +				"╚███╔███╔╝███████╗███████╗╚██████╗╚██████╔╝██║ ╚═╝ ██║███████╗       ██║   ╚██████╔╝    ███████╗╚██████╔╝██║  ██║██║  ██╗\n" +				" ╚══╝╚══╝ ╚═s═════╝╚══════╝ ╚═════╝ ╚═════╝ ╚═╝     ╚═╝╚══════╝       ╚═╝    ╚═════╝     ╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝\n" +				"                                                                                                                         ");		System.out.println(currentRoom.longDescription());		System.out.println("for help type \"help\"");	}	private boolean processCommand(Command command) {		if (command.isUnknown()) {			System.out.println("I don't know what you mean...");			return false;		}		String commandWord = command.getCommandWord();		switch (commandWord) {			case "help":				printHelp();				break;			case "go":				goRoom(command);				break;			case "back":				back(lastRoom);				break;			case "inventory":				printInventory();				break;			case "quit":				if (command.hasSecondWord()) {					System.out.println("Quit what?");				} else {					return true; // signal that we want to quit				}				break;		}		return false;	}	private void printHelp() {		System.out.println("Your command words are:");		System.out.println(parser.showCommands());	}	private void printInventory() {		if (inventory.isEmpty()){			System.out.println("Your inventory is empty");		} else {			inventory.forEach((item) -> System.out.println("You have 1 " +  item + "in your inventory"));		}	}	private void goRoom(Command command) {		if (!command.hasSecondWord()) {			System.out.println("Go where?");		} else {			String direction = command.getSecondWord();			// Try to leave current room.			lastRoom = currentRoom;			Room nextRoom = currentRoom.nextRoom(direction);			if (nextRoom == null)				System.out.println("There is no door!");			else {				currentRoom = nextRoom;				System.out.println(currentRoom.longDescription());			}		}	}	private void back(Room lastRoom){		currentRoom = lastRoom;		System.out.println("You are now in " + currentRoom.shortDescription());	}	private void win(){		System.out.println("You won");		System.out.println("Congratulations");	}	private boolean room1() {		if (games.monsterGame()){			return checkDeath();		} else {			return false;		}	}	private boolean room2(){		inventory.add(item.receiveItem(currentRoom.shortDescription()));		System.out.println(inventory);		System.out.println(inventory.contains("Truefruits"));		return false;	}	private boolean room3(){		if (games.rockPaperScissors()){			return checkDeath();		} else {			return false;		}	}	private boolean room4(){		inventory.add(item.receiveItem(currentRoom.shortDescription()));		return false;	}	private boolean room5() {		if (games.monsterGame()){			return checkDeath();		} else {			return false;		}	}	private boolean room6(){		if (games.rockPaperScissors()){			return checkDeath();		} else {			return false;		}	}	private boolean room7(){		if (games.randomNumberGame()){			return checkDeath();		} else {			return false;		}	}	public boolean checkDeath(){		if (inventory.contains("Truefruits") || inventory.contains("Mbudget")){			if (inventory.contains("Truefruits")){				inventory.remove(inventory.indexOf("Truefruits"));				System.out.println("Your Truefruits-Smoothie saved you from Death");				return false;			} else {				inventory.remove(inventory.indexOf("Mbudget"));				System.out.println("Your M-Budget Energy-Drink saved you from Death");				return false;			}		} else {			return true;		}	}}