package ch.bbw.zork;import java.util.Scanner;/** * Class Game - the main class of the "Zork" game. * * Author:  Michael Kolling, 1.1, March 2000 * refactoring: Rinaldo Lanza, September 2020 */public class Game {		private Parser parser;	private Room currentRoom;	private Room lastRoom;	private Room start, room1, room2, room3, room4, room5, room6, room7, death, end;	private Scanner scanner = new Scanner(System.in);	public Game() {		parser = new Parser(System.in);		start = new Room("Spawnpoint");		room1 = new Room("Fight against the monster");		room2 = new Room("Grab some truefruits smoothies, restoring 1 HP");		room3 = new Room("play \"rock paper scissors\""); // against the digital chind		room4 = new Room("the exit vim game");		room5 = new Room("the \"das wissen sie bereits game\"");		room6 = new Room("tictactoe");		room7 = new Room("guess a number between 1-100");		death = new Room("Istantaneous, horrific, gruesome, inexplicable Death.");		end = new Room("Win");		start.setExits(room1, null, room3, null);		room1.setExits(null, room2, null, null);		room2.setExits(null, room6, room5, room1);		room3.setExits(null, room4, death, null);		room4.setExits(null, room5, death, room3);		room5.setExits(null, null, room4, room2);		room6.setExits(null, room7, room2, start);		room7.setExits(room6, null, end, room5);		end.setExits(null, null, null, null);		currentRoom = start; // start game outside	}	/**	 *  Main play routine.  Loops until end of play.	 */	public void play() {		printWelcome();		// Enter the main command loop.  Here we repeatedly read commands and		// execute them until the game is over.		boolean finished = false;		while (!finished) {			Command command = parser.getCommand();			finished = processCommand(command);			if (room1.equals(currentRoom)) {				finished = room1();			}						//win			if (end.equals(currentRoom)){				win();			}		}		//Death		System.out.println("Thank you for playing.  Good bye.");	}	private void printWelcome() {		System.out.println("" +				"██╗    ██╗███████╗██╗      ██████╗ ██████╗ ███╗   ███╗███████╗    ████████╗ ██████╗     ███████╗ ██████╗ ██████╗ ██╗  ██╗\n" +				"██║    ██║██╔════╝██║     ██╔════╝██╔═══██╗████╗ ████║██╔════╝    ╚══██╔══╝██╔═══██╗    ╚══███╔╝██╔═══██╗██╔══██╗██║ ██╔╝\n" +				"██║ █╗ ██║█████╗  ██║     ██║     ██║   ██║██╔████╔██║█████╗         ██║   ██║   ██║      ███╔╝ ██║   ██║██████╔╝█████╔╝ \n" +				"██║███╗██║██╔══╝  ██║     ██║     ██║   ██║██║╚██╔╝██║██╔══╝         ██║   ██║   ██║     ███╔╝  ██║   ██║██╔══██╗██╔═██╗ \n" +				"╚███╔███╔╝███████╗███████╗╚██████╗╚██████╔╝██║ ╚═╝ ██║███████╗       ██║   ╚██████╔╝    ███████╗╚██████╔╝██║  ██║██║  ██╗\n" +				" ╚══╝╚══╝ ╚══════╝╚══════╝ ╚═════╝ ╚═════╝ ╚═╝     ╚═╝╚══════╝       ╚═╝    ╚═════╝     ╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝\n" +				"                                                                                                                         ");		System.out.println(currentRoom.longDescription());	}	private boolean processCommand(Command command) {		if (command.isUnknown()) {			System.out.println("I don't know what you mean...");			return false;		}		String commandWord = command.getCommandWord();		if (commandWord.equals("help")) {			printHelp();		} else if (commandWord.equals("go")) {			goRoom(command);		} else if (commandWord.equals("back")) {			goRoom(command);		} else if (commandWord.equals("quit")) {			if (command.hasSecondWord()) {				System.out.println("Quit what?");			} else {				return true; // signal that we want to quit			}		}		return false;	}	private void printHelp() {		System.out.println("Your command words are:");		System.out.println(parser.showCommands());	}	private void goRoom(Command command) {		if (!command.hasSecondWord()) {			System.out.println("Go where?");		} else {						String direction = command.getSecondWord();				// Try to leave current room.			lastRoom = currentRoom;			Room nextRoom = currentRoom.nextRoom(direction);				if (nextRoom == null)				System.out.println("There is no door!");			else {				currentRoom = nextRoom;				System.out.println(currentRoom.longDescription());			}		}	}	/*private void back(){		currentRoom = lastRoom;	}*/	private void win(){		System.out.println("You won");		System.out.println("Congratulations");	}		private boolean room1() {		System.out.println("The Monster wants to kill you!!!" +				"but you can fight against it");		boolean trueFalse = false;		System.out.println("write /kill to kill the Monster before it kills you");		String userInputCommand = scanner.nextLine();		long endTime = System.currentTimeMillis() + 10000;		while (System.currentTimeMillis() < endTime) {			if (userInputCommand.equals("/kill")) {				System.out.println("Monster is dead");				System.out.println("du kannst");				trueFalse = false;			} else {				System.out.println("The Monster killed you \n You are dead");				trueFalse = true;			}			break;		}		return trueFalse;	} 	}